////////////////////////////////////////////////////////////////
// 455 Periodic Strings
////////////////////////////////////////////////////////////////
// A character string is said to have period k if it can be
// formed by concatenating one or more repetitions of another
// string of length k. For example, the string ”abcabcabcabc”
// has period 3, since it is formed by 4 repetitions of the
// string ”abc”. It also has periods 6 (two repetitions of
// ”abcabc”) and 12 (one repetition of ”abcabcabcabc”). Write a
// program to read a character string and determine its smallest
// period.  Input: The first line of the input file will contain
// a single integer N indicating how many test case that your
// program will test followed by a blank line. Each test case
// will contain a single character string of up to 80 non-blank
// characters. Two consecutive input will separated by a blank
// line.  Output: An integer denoting the smallest period of the
// input string for each input. Two consecutive output are
// separated by a blank line.  Sample Input: 1 HoHoHo Sample
// Output: 2
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <iostream>
# include <vector>
# include <algorithm>
# include <string>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define OVERLOAD_OSTREAM_OPERATOR( Container )                \
template <typename... T>                                       \
ostream& operator<<( ostream& os, const Container<T...>& con ){\
    os << "[ ";                                                \
    for( const auto& y: con ) os << y << " ";                  \
    return os <<"]";                                           \
}
//////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////// 
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
OVERLOAD_OSTREAM_OPERATOR( vector );
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using i64 = long long;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
inline void VROOOM() {
    cin.tie( nullptr );
    cout.sync_with_stdio( false );
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
constexpr char nl = '\n';
constexpr char sp = ' ';
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
vector<int> kmp( const string& s ){
    int n = s.size();
    vector<int> pi( n );
    for( int i = 1; i < n; ++i ){
        int j = pi[i - 1];
        while( true ){
            if( s[i] == s[j] ){
                pi[i] = j + 1;
                break;
            }
            if( j == 0 ){ break; }
            j = pi[j - 1];
        }
    }
    return pi;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// abcabcabcabc
// 000123456789
// bobbobbobbob
// 001123456789
// bobibobobibo
// 001012323456
// iboiiboiboiibo
// 00011234234567
////////////////////////////////////////////////////////////////
int smallest_period( const string& s ){
    int n = s.size();
    if( n == 0 ){ return 0; }
    vector<int> pi = kmp( s );
    int k = n - pi.back();
    return (n % k) ? n : k;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main() {
    VROOOM();
    if( 0 ){
    } else {
        int n; cin >> n;
        for( int i = 0; i < n; i++ ){
            string s; cin >> s;
            cout << smallest_period( s ) << nl;
            if( i < n - 1 ){
                cout << nl;
            }
        }
    }
}
//////////////////////////////////////////////////////////////// A
//////////////////////////////////////////////////////////////// c
//////////////////////////////////////////////////////////////// c
//////////////////////////////////////////////////////////////// e
//////////////////////////////////////////////////////////////// p
//////////////////////////////////////////////////////////////// t
//////////////////////////////////////////////////////////////// e
//////////////////////////////////////////////////////////////// d
