////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Increasing Array
////////////////////////////////////////////////////////////////
// Time limit: 1.00 s
// Memory limit: 512 MB
////////////////////////////////////////////////////////////////
// You are given an array of n integers. You want to modify the
// array so that it is increasing, i.e., every element is at
// least as large as the previous element.  On each move, you
// may increase the value of any element by one. What is the
// minimum number of moves required?
////////////////////////////////////////////////////////////////
// Input
// The first input line contains an integer n: the size of the
// array. Then, the second line contains n integers
// x_1,x_2,...,x_n: the contents of the array.
// Output
// Print the minimum number of moves.
////////////////////////////////////////////////////////////////
// Constraints
////////////////////////////////////////////////////////////////
// 1 <= n <= 2 * 10^5
// 1 <= x_i <= 10^9
////////////////////////////////////////////////////////////////
// Example
// Input:
// 5
// 3 2 5 1 7
////////////////////////////////////////////////////////////////
// Output:
// 5
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <bits/stdc++.h>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
typedef int i32;
typedef unsigned int u32;
typedef long long i64;
typedef unsigned long long u64;
typedef vector<i32> v32;
////////////////////////////////////////////////////////////////
constexpr char nl = '\n';
constexpr char sp = ' ';
////////////////////////////////////////////////////////////////
template <typename T>
istream& operator>>( istream& is, vector<T>& v ){
    for( auto& y: v ){ is >> y; }
    return is;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
inline void vrooom() {
    cin.tie( nullptr )->sync_with_stdio( false );
}
////////////////////////////////////////////////////////////////
template <typename T>
inline T load_scalar() {
    T y; cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
template <typename T>
inline vector<T> load_vector( int n ) {
    vector<T> y( n ); cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define OVERLOAD_OSTREAM_OPERATOR( Container )                \
template <typename... T>                                       \
ostream& operator<<( ostream& os, const Container<T...>& con ){\
    os << "[ ";                                                \
    for( const auto& y: con ) os << y << " ";                  \
    return os <<"]";                                           \
}
////////////////////////////////////////////////////////////////
OVERLOAD_OSTREAM_OPERATOR( vector );
////////////////////////////////////////////////////////////////
int main() {
    vrooom();
    auto n = load_scalar<u32>();
    auto a = load_vector<u32>( n );
    u64 c = 0;
    for( u32 i = 1; i < n; ++i ){
        if( a[i] < a[i - 1] ){
            c += a[i - 1] - a[i];
            a[i] = a[i - 1];
        }
    }
    cout << c << nl;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
