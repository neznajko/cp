////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Number Spiral
////////////////////////////////////////////////////////////////
// Time limit: 1.00 s
// Memory limit: 512 MB
// A number spiral is an infinite grid whose upper-left square
// has number 1. Here are the first five layers of the spiral:
// Your task is to find out the number in row y and column x.
// Input
// The first input line contains an integer t: the number of
// tests.  After this, there are t lines, each containing
// integers y and x.
// Output
// For each test, print the number in row y and column x.
// Constraints
// 1 <= t <= 10^5
// 1 <= y,x <= 10^9
// Example
// Input:
// 3
// 2 3
// 1 1
// 4 2
// Output:
// 8
// 1
// 15
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <bits/stdc++.h>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
typedef int i32;
typedef unsigned int u32;
typedef long long i64;
typedef unsigned long long u64;
typedef vector<i32> vi32;
typedef vector<u32> vu32;
typedef vector<bool> vbool;
////////////////////////////////////////////////////////////////
constexpr char nl = '\n';
constexpr char sp = ' ';
////////////////////////////////////////////////////////////////
template <typename T>
istream& operator>>( istream& is, vector<T>& v ){
    for( auto& y: v ){ is >> y; }
    return is;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
inline void vrooom() {
    cin.tie( nullptr )->sync_with_stdio( false );
}
////////////////////////////////////////////////////////////////
template <typename T>
inline T load_scalar() {
    T y; cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
template <typename T>
inline vector<T> load_vector( int n ) {
    vector<T> y( n ); cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string OPEN_BRACKET = "[";
string CLOSE_BRACKET = "]";
string SEPARATOR = ",";
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define OVERLOAD_OSTREAM_OPERATOR( Container )                \
template <typename... T>                                       \
ostream& operator<<( ostream& os, const Container<T...>& con ){\
    os << OPEN_BRACKET;                                        \
    string sep = "";                                           \
    for( const auto& y: con ){                                 \
        os << sep << y;                                        \
        sep = SEPARATOR;                                       \
    }                                                          \
    return os << CLOSE_BRACKET;                                \
}
////////////////////////////////////////////////////////////////
OVERLOAD_OSTREAM_OPERATOR( vector );
////////////////////////////////////////////////////////////////
# define FOR_THE_HORDE auto t = load_scalar<u32>(); while( t-- )
# define odd( x ) ((x) & 1)
# define even( y ) (!odd( y ))
# define sqr( x ) ((x) * (x))
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//  1  2  3  4  5  6  7  8   take smaller of x and y, if
// -- -- -- -- -- -- -- --   y) check if x is odd or even
//  1  2  9 10 25 26 49 50 1    odd) s[x] = x**2
//  4  3  8 11 24 27 48 51 2         return s[x] - y + 1
//  5  6  7 12 23 28 47 52 3    even) s[x] = (x-1)**2 + 1
// 16 15 14 13 22 29 46 53 4          return s[x] + y - 1
// 17 18 19 20 21 30 45 54 5 x) even) s[y] = y**2
// 36 35 34 33 32 31 44 55 6          return s[y] - x + 1
// 37 38 39 40 41 42 43 56 7     odd) s[y] = (y-1)**2 + 1
// 64 63 62 61 60 59 58 57 8          return s[y] + x - 1
//
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
u64 number_spiral( u64 y, u64 x ){
    if( y <= x ){
        return odd( x ) ? sqr( x ) - y + 1 : sqr( x - 1 ) + y;
    }
    return even( y ) ? sqr( y ) - x + 1 : sqr( y - 1 ) + x;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main() {
    vrooom();
    FOR_THE_HORDE {
        auto y = load_scalar<u64>();
        auto x = load_scalar<u64>();
        cout << number_spiral( y, x ) << nl;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
