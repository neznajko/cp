////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Two Knights
////////////////////////////////////////////////////////////////
// Time limit: 1.00 s
// Memory limit: 512 MB
////////////////////////////////////////////////////////////////
// Your task is to count for k=1,2,...,n the number of ways two 
// knights can be placed on a k x k chessboard so that they
// do not attack each other.
////////////////////////////////////////////////////////////////
// Input
// The only input line contains an integer n.
////////////////////////////////////////////////////////////////
// Output
// Print n integers: the results.
////////////////////////////////////////////////////////////////
// Constraints
// 1 <= n <= 10000
////////////////////////////////////////////////////////////////
// Example
// Input:
// 8
// Output:
// 0
// 6
// 28
// 96
// 252
// 550
// 1056
// 1848
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <bits/stdc++.h>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
typedef int i32;
typedef unsigned int u32;
typedef long long i64;
typedef unsigned long long u64;
typedef vector<i32> vi32;
typedef vector<u32> vu32;
typedef vector<bool> vbool;
typedef vector<i64> vi64;
typedef vector<u64> vu64;
////////////////////////////////////////////////////////////////
constexpr char nl = '\n';
constexpr char sp = ' ';
constexpr char tab = '\t';
////////////////////////////////////////////////////////////////
template <typename T>
istream& operator>>( istream& is, vector<T>& v ){
    for( auto& y: v ){ is >> y; }
    return is;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
inline void vrooom() {
    cin.tie( nullptr )->sync_with_stdio( false );
}
////////////////////////////////////////////////////////////////
template <typename T>
inline T load_scalar() {
    T y; cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
template <typename T>
inline vector<T> load_vector( int n ) {
    vector<T> y( n ); cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
string OPEN_BRACKET = "[";
string CLOSE_BRACKET = "]";
string SEPARATOR = ",";
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define OVERLOAD_OSTREAM_OPERATOR( Container )                \
template <typename... T>                                       \
ostream& operator<<( ostream& os, const Container<T...>& con ){\
    os << OPEN_BRACKET;                                        \
    string sep = "";                                           \
    for( const auto& y: con ){                                 \
        os << sep << y;                                        \
        sep = SEPARATOR;                                       \
    }                                                          \
    return os << CLOSE_BRACKET;                                \
}
////////////////////////////////////////////////////////////////
OVERLOAD_OSTREAM_OPERATOR( vector );
////////////////////////////////////////////////////////////////
# define FOR_THE_HORDE auto t = load_scalar<u32>(); while( t-- )
# define odd( x ) ((x) & 1)
# define even( y ) (!odd( y ))
# define sqr( x ) ((x) * (x))
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 2 | 3 | 4 | 3 | 2 |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 1 ((n-4)*4+2*3+2*2)*(n-2)+
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+   (n-4)*2+1*2+1*2=
// | 3 | 4 | 6 | 4 | 3 |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 2 ((n-4)*4+10)*(n-2)+
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+   (n-4)*2+4
// | 4 | 6 | 8 | 6 | 4 |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 3  
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+   N:=n*n
// | 3 | 4 | 6 | 4 | 3 |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 4 N-1+N-2+...+2+1=N(N-1)/2
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+   
// | 2 | 3 | 4 | 3 | 2 |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 5
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// |   |   |   |   |   |   |   | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 6
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// |   |   |   |   |   |   |   | 1 | 1 | 2 | 2 | 2 | 2 | 1 | 1 | 7
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 8
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 3 | 4 | 6 | 6 | 6 | 6 | 4 | 3 |   |   |   |   |   |   |   | 9
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 4 | 6 | 8 | 8 | 8 | 8 | 6 | 4 |   |   |   |   |   |   |   | a
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 4 | 6 | 8 | 8 | 8 | 8 | 6 | 4 |   |   | 2 | 3 | 4 | 3 | 2 | b
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 4 | 6 | 8 | 8 | 8 | 8 | 6 | 4 |   |   | 2 | 3 | 4 | 3 | 2 | c
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 4 | 6 | 8 | 8 | 8 | 8 | 6 | 4 |   |   | 2 | 3 | 4 | 3 | 2 | d
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 3 | 4 | 6 | 6 | 6 | 6 | 4 | 3 |   |   | 1 | 1 | 2 | 1 | 1 | e
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
// | 2 | 3 | 4 | 4 | 4 | 4 | 3 | 2 |   |   | 0 | 0 | 0 | 0 | 0 | f
// +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
u64 two_knights( u64 n ){
    static const vu64 CACHE = {
        0, 0, 6, 28, 96, 252, 550, 1056, 1848,
    };
    if( n < CACHE.size() ){ return CACHE[ n ]; }
    u64 N = sqr( n );
    u64 S = N * (N - 1) / 2;
    u64 K = ((n - 4) * 4 + 10) * (n - 2) + (n - 4) * 2 + 4;
    return S - K;
}
////////////////////////////////////////////////////////////////
int main() {
    vrooom();
    auto n = load_scalar<u64>();
    for( u64 k = 1; k <= n; ++k ){
        cout << two_knights( k ) << nl;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
