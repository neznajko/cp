////////////////////////////////////////////////////////////////
// Weird Algorithm
////////////////////////////////////////////////////////////////
// Time limit: 1.00 s
// Memory limit: 512 MB
////////////////////////////////////////////////////////////////
// Consider an algorithm that takes as input a positive integer
// n. If n is even, the algorithm divides it by two, and if n is
// odd, the algorithm multiplies it by three and adds one. The
// algorithm repeats this, until n is one. For example, the
// sequence for n=3 is as follows:
////////////////////////////////////////////////////////////////
// 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
////////////////////////////////////////////////////////////////
// Your task is to simulate the execution of the algorithm for a
// given value of n.
////////////////////////////////////////////////////////////////
// Input
////////////////////////////////////////////////////////////////
// The only input line contains an integer n.
////////////////////////////////////////////////////////////////
// Output
////////////////////////////////////////////////////////////////
// Print a line that contains all values of n during the
// algorithm.
////////////////////////////////////////////////////////////////
// Constraints
////////////////////////////////////////////////////////////////
// 1 <= n <= 10^6
////////////////////////////////////////////////////////////////
// Example
////////////////////////////////////////////////////////////////
// Input:
////////////////////////////////////////////////////////////////
// 3
// Output:
////////////////////////////////////////////////////////////////
// 3 10 5 16 8 4 2 1
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <bits/stdc++.h>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
typedef int i32;
typedef unsigned long long u64;
////////////////////////////////////////////////////////////////
constexpr char nl = '\n';
constexpr char sp = ' ';
////////////////////////////////////////////////////////////////
inline void vrooom() {
    cin.tie( nullptr )->sync_with_stdio( false );
}
////////////////////////////////////////////////////////////////
template <typename T>
T load() {
    T y; cin >> y;
    return y;
}
////////////////////////////////////////////////////////////////
# define OVERLOAD_OSTREAM_OPERATOR( Container )                \
template <typename... T>                                       \
ostream& operator<<( ostream& os, const Container<T...>& con ){\
    os << "[ ";                                                \
    for( const auto& y: con ) os << y << " ";                  \
    return os <<"]";                                           \
}
////////////////////////////////////////////////////////////////
OVERLOAD_OSTREAM_OPERATOR( vector );
////////////////////////////////////////////////////////////////
int main() {
    vrooom();
    auto n = load<u64>();
    while( true ){
        cout << n;
        if( n == 1 ){ break; }
        else{ cout << sp; }
        if( n & 1 ){
            n = 3 * n + 1;
        } else {
            n /= 2;
        }
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
